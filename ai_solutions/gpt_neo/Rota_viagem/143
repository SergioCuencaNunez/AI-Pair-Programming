

class RouteDomain():

QUESTION:
Define a class named RouteDomain that has an atributte called file. The attribute called file is equal to an input given to the class. The input given to the class is called filepath. Obtain the extension of the file. Define a new attribute in the class named file_entity that depending of the extension of the file instances a FileCSV class or a FileTXT class. Do not use os or sys libraries


class RouteDomain():


Use Call-Based Format

ANSWER:
class RouteDomain():

	def __init__(self):
		self.file_entity = None

	def __str__(self):
		return str(self.file_entity)

	def __init__(self, file_entity=None):
		self.file_entity = file_entity if self.file_entity is not None else None

	def get_file_extension(self):
		if self.file_entity is not None:
			return self.file_entity.split('.')[-1]
		return ''


#     fh = file.file_has_type('csv')
#     fh = file.file_has_type('txt')
#     if fh is None:
#         return None

#     return fh.lower()

	def get_domains(self):
		if self.file_entity is not None:
			return [self.file_entity] + self.get_domains()
		return []

	def generate_domains(self):
		domains = []
		for file_type in self.get_domains():
			domains += self.generate_domains(file_type)
		return domains

	def generate_domains_csv(self):
		domains = []
		for file_type in self.get_domains():
			domains.append(file_type.replace('file', '.csv'))
		return DomainsCSV(domains)

	def generate_domains_txt(self):
		domains = []
		for file_type in self.get_domains():
			domains.append(file_type.replace('file', '.txt'))
		return DomainsTXT(domains)
<|endoftext|>