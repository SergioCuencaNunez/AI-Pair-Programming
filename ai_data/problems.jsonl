{"task_id": "test/0", "prompt": "\n\ndef incr_list(l: list):\n", "question": "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "entry_point": "incr_list", "canonical_solution": "    return [(e + 1) for e in l]\n"}
{"task_id": "test/1", "prompt": "\n\ndef is_prime(n):\n", "question": "\"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"}
{"task_id": "test/2", "prompt": "\ndef add_elements(arr, k):\n", "question": "\"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "entry_point": "add_elements", "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n"}
{"task_id": "test/3", "prompt": "\ndef solution(lst):\n", "question": "\"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "entry_point": "solution", "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"}
{"task_id": "test/4", "prompt": "\ndef digits(n):\n", "question": "\"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "entry_point": "digits", "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"}


{"task_id": "test/5", "prompt": "\ndef get_current_request():\n", "question": "\"\"\"    Return the current request that is being made in the application using the function local() to get the locals threads    \"\"\"\n", "entry_point": "get_current_request", "canonical_solution": "    return getattr(_thread_locals, 'request', None)"}
{"task_id": "test/6", "prompt": "\ndef get_current_user():\n", "question": "\"\"\"    Return the current user that is using the application    \"\"\"\n", "entry_point": "get_current_user", "canonical_solution": "    request = get_current_request()\n    if request:        return getattr(request, 'user', None)"}
{"task_id": "test/7", "prompt": "\ndef set_current_user(user):\n", "question": "\"\"\"    Given a user make the application set this user to use the application    \"\"\"\n", "entry_point": "set_current_user", "canonical_solution": "    try:\n        _thread_locals.request.user = user\n    except AttributeError:\n        request = MockRequest(user=user)\n        _thread_locals.request = request"}
{"task_id": "test/8", "prompt": "\ndef clear_request():\n", "question": "\"\"\"    Delete the current request    \"\"\"\n", "entry_point": "clear_request", "canonical_solution": "    try:\n        del _thread_locals.request\n    except AttributeError:\n        pass"}
{"task_id": "test/9", "prompt": "\ndef user_logged_in(sender, request, user, **kwargs):\n", "question": "\"\"\"    Given a request and a user return a function that enables a user to log in the application    \"\"\"\n", "entry_point": "user_logged_in", "canonical_solution": "    try:\n        with transaction.atomic():\n            login_event = audit_logger.login({\n                     'login_type': LoginEvent.LOGIN,\n                     'username': getattr(user, user.USERNAME_FIELD),\n                     'user_id': getattr(user, 'id', None),\n                     'remote_ip': request.META[REMOTE_ADDR_HEADER]\n            })\n    except\n        pass"}
{"task_id": "test/10", "prompt": "\ndef user_logged_out(sender, request, user, **kwargs):\n", "question": "\"\"\"    Given a request and a user return a function that enables a user to log out the application    \"\"\"\n", "entry_point": "user_logged_out", "canonical_solution": "    try:\n        with transaction.atomic():\n            login_event = audit_logger.login({\n                     'login_type': LoginEvent.LOGOUT,\n                     'username': getattr(user, user.USERNAME_FIELD),\n                     'user_id': getattr(user, 'id', None),\n                     'remote_ip': request.META[REMOTE_ADDR_HEADER]\n            })\n    except\n        pass"}
{"task_id": "test/11", "prompt": "\ndef user_login_failed(sender, credentials, **kwargs):\n", "question": "\"\"\"    Given the credentials of a user return a function returns a failed log in of a user using the current request and the current user    \"\"\"\n", "entry_point": "user_login_failed", "canonical_solution": "    try:\n        with transaction.atomic():\n            request = get_current_request()\n            user_model = get_user_model()\n            login_event = audit_logger.login({\n                     'login_type': LoginEvent.login,\n                     'login_type': LoginEvent.FAILED,\n                     'username': getattr(user, user.USERNAME_FIELD),\n                     'remote_ip': request.META[REMOTE_ADDR_HEADER]\n            })\n    except\n        pass"}