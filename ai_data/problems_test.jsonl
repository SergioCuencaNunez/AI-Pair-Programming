{"task_id": "test/0", "prompt": "\n\nclass RouteDomain():\n", "question": "Return a class named RouteDomain where an atributte called file is an input given to the class named filepath", "entry_point": "test0", "canonical_solution": "class RouteDomain()\n        def __init__(self, filepath):\n        self.file = filepath"}
{"task_id": "test/1", "prompt": "\n\nclass RouteDomain():\n", "question": "Return a class named RouteDomain where an atributte called file is an input given to the class named filepath and obtain the extension of the file. Define a new attribute called file_entity that depending of the extension of the file instances a FileCSV class or a FileTXT class.", "entry_point": "test1", "canonical_solution": "class RouteDomain()\n        def __init__(self, filepath):\n        self.file = filepath\n        ext = self.file.split('.')[-1]\n        self.file_entity = file_accepted[ext](self.file)"}
{"task_id": "test/2", "prompt": "\n\nclass RouteDomain():\n", "question": "Return a class named RouteDomain where an atributte called file is an input given to the class named filepath and obtain the extension of the file. Define a new attribute called file_entity that depending of the extension of the file instances a FileCSV class or a FileTXT class. Get each line of the file_entity and obtain a graph with it given a class called Graph. Store this in a new atribute named graph.", "entry_point": "test2", "canonical_solution": "class RouteDomain()\n        def __init__(self, filepath):\n        self.file = filepath\n        ext = self.file.split('.')[-1]\n        self.file_entity = file_accepted[ext](self.file)\n        data = self.file_entity.get_lines()\n        self.graph = Graph(data)"}