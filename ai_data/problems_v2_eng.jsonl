{"task_id": "test/0", "prompt": "from flask import Flask ,request,jsonify, make_response\nfrom flask_restful import Resource, Api\nfrom flask_pymongo import PyMongo", "question": "Using Flask, define a class named User with a post method to insert a new user to the pyMongo mongo db users table. Obtain name and designation attributes from the request. Use /user as the HTTP URL.", "entry_point": "test0", "canonical_solution": "class User(Resource):\n      def post(self):\n          user = mongo.db.users\n          name = request.json['name']\n          designation = request.json['designation']\n          _id = user.insert({'name': name, 'designation': designation})\n          new_user = user.find_one({'_id': _id})\n          output = {'name' : new_user['name'], 'designation' : new_user['designation']}\n          return jsonify({'result' : output})\n\napi.add_resource(User,'/user')\n"}
{"task_id": "test/1", "prompt": "from flask import Flask ,request,jsonify, make_response\nfrom flask_restful import Resource, Api\nfrom flask_pymongo import PyMongo", "question": "Using Flask, define a get method to find a user in the pyMongo mongo db users table using the name and designation attributes given in the query string. Use /user as the HTTP URL.", "entry_point": "test1", "canonical_solution": "class User(Resource):\n      def get_one_user():\n          user = mongo.db.users\n          s = user.find_one({'name' : name})\n          if s:\n            output = {'name' : s['name'], 'designation' : s['designation']}\n          else:\n            output = 'No such name'\n          return jsonify({'result' : output})\n\nnapi.add_resource(User,'/user')\n"}
{"task_id": "test/2", "prompt": "from flask import Flask ,request,jsonify, make_response\nfrom flask_restful import Resource, Api\nfrom flask_pymongo import PyMongo", "question": "Using Flask, define a get method to find all users in the pyMongo mongo db users table using the columns name and designation given in the query string. Use /users as the HTTP URL.", "entry_point": "test2", "canonical_solution": "class User(Resource):\n      def get_all_users(self):\n          user = mongo.db.users\n          output = []\n          for s in user.find():\n            output.append({'name' : s['name'], 'designation' : s['designation']})\n            return jsonify({'result' : output})\n\nnapi.add_resource(User,'/user')\n"}