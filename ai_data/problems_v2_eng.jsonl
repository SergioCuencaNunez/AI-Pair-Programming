{"task_id": "test/3", "prompt": "\n\n\nclass User(Resource):\n", "question": "Using Flask, define a class named User with a post method to insert a new user to the pyMongo mongo db users table. Obtain name and designation attributes from the request. Define a get method to find a user in the pyMongo mongo db users table using the name and designation attributes.", "entry_point": "test3", "canonical_solution": "class User(Resource):\n      def post(self):\n          user = mongo.db.users\n          name = request.json['name']\n          designation = request.json['designation']\n          _id = user.insert({'name': name, 'designation': designation})\n          new_user = user.find_one({'_id': _id})\n          output = {'name' : new_user['name'], 'designation' : new_user['designation']}\n          return jsonify({'result' : output})\n\n      def get(self):\n          user = mongo.db.users\n          output = []\n          for s in user.find():\n            output.append({'name' : s['name'], 'designation' : s['designation']})\n            return jsonify({'result' : output})\n\napi.add_resource(HelloWorld,'/hello')\napi.add_resource(User,'/user')\n"}
{"task_id": "test/4", "prompt": "\n\ndef get_all_stars():\n", "question": "Using Flask, define a function named get_all_stars that finds every star in the pyMongo mongo db stars table using the name and distance attributes.", "entry_point": "test4", "canonical_solution": "def get_all_stars():\n      star = mongo.db.stars\n      output = []\n      for s in star.find():\n          output.append({'name' : s['name'], 'distance' : s['distance']})\n      return jsonify({'result' : output})\n"}
{"task_id": "test/5", "prompt": "\n\ndef get_one_star(name):\n", "question": "Using Flask, define a function named get_one_star(name) that finds one star in the pyMongo mongo db stars table using the name input given to the function. Return the name and distance of the star in case it exists in a json output", "entry_point": "test5", "canonical_solution": "def get_one_star(name):\n      star = mongo.db.stars\n      s = star.find_one({'name' : name})\n      if s:\n          output = {'name' : s['name'], 'distance' : s['distance']}\n      else:\n          output = 'No such name'\n      return jsonify({'result' : output})\n"}
{"task_id": "test/6", "prompt": "\n\ndef add_star():\n", "question": "Using Flask, define a function named add_star() that adds one star in the pyMongo mongo db stars table. To add the star, obtain name and distance attributes from the request and return the output in a json format.", "entry_point": "test5", "canonical_solution": "def add_star():\n      star = mongo.db.stars\n      name = request.json['name']\n      distance = request.json['distance']\n      star_id = star.insert({'name': name, 'distance': distance})\n      new_star = star.find_one({'_id': star_id })\n      output = {'name' : new_star['name'], 'distance' : new_star['distance']}\n      return jsonify({'result' : output})\n"}