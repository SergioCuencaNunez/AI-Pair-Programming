{"task_id": "test/0", "prompt": "\n\nclass RouteDomain():\n", "question": "Define a class named RouteDomain that has an atributte called file. The attribute called file is equal to an input given to the class. The input given to the class is called filepath.", "entry_point": "test0", "canonical_solution": "class RouteDomain()\n        def __init__(self, filepath):\n        self.file = filepath"}
{"task_id": "test/1", "prompt": "\n\nclass RouteDomain():\n", "question": "Define a class named RouteDomain that has an atributte called file. The attribute called file is equal to an input given to the class. The input given to the class is called filepath. Obtain the extension of the file. Define a new attribute in the class named file_entity that depending of the extension of the file instances a FileCSV class or a FileTXT class. Do not use os or sys libraries", "entry_point": "test1", "canonical_solution": "class RouteDomain()\n        def __init__(self, filepath):\n        self.file = filepath\n        ext = self.file.split('.')[-1]\n        self.file_entity = file_accepted[ext](self.file)"}
{"task_id": "test/2", "prompt": "\n\nclass RouteDomain():\n", "question": "Define a class named RouteDomain that has an atributte called file. The attribute called file is equal to an input given to the class. The input given to the class is called filepath. Obtain the extension of the file. Define a new attribute in the class named file_entity that depending of the extension of the file instances a FileCSV class or a FileTXT class. Use a function called get_lines to read each line of the file_entity and store it in a variable called data.  Define a new attribute in the class named graph that using the variable data instances a Graph class. Do not use os or sys libraries", "entry_point": "test2", "canonical_solution": "class RouteDomain()\n        def __init__(self, filepath):\n        self.file = filepath\n        ext = self.file.split('.')[-1]\n        self.file_entity = file_accepted[ext](self.file)\n        data = self.file_entity.get_lines()\n        self.graph = Graph(data)"}