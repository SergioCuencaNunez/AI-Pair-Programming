{"task_id": "test/0", "prompt": "\n\ndef incr_lista(lista):", "question": "\"\"\"Devuelve una lista con elementos incrementados por 1.\n    >>> incr_lista([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_lista([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "entry_point": "test0", "canonical_solution": "    return [(e + 1) for e in l]\n"}
{"task_id": "test/1", "prompt": "\n\ndef es_primo(n):\n", "question": "\"\"\"Devuelve verdadero si un numero es primo y falso al contrario.\n    >>> es_primo(6)\n    False\n    >>> es_primo(101)\n    True\n    >>> es_primo(11)\n    True\n    >>> es_primo(13441)\n    True\n    >>> es_primo(61)\n    True\n    >>> es_primo(4)\n    False\n    >>> es_primo(1)\n    False\n    \"\"\"\n", "entry_point": "test1", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"}
{"task_id": "test/2", "prompt": "\ndef anadir_elementos(arr, k):\n", "question": "\"\"\"Dado un array de enteros no vacío arr y un entero k, devuelve la suma de los elementos con dos dígitos como máximo de los primeros k elementos de arr.\n\n    Ejemplo:\n\n        Entrada: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Salida: 24 # sum of 21 + 3\n\n    Contricciones:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "entry_point": "test2", "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n"}
{"task_id": "test/3", "prompt": "\ndef solucion(lst):\n", "question": "\"\"\"Dada una lista no vacía de enteros, devuelve la suma de todos los elementos impares que están en posiciones pares.\n    \n\n    Ejemplos\n    solucion([5, 8, 7, 1]) ==> 12\n    solucion([3, 3, 3, 3, 3]) ==> 9\n    solucion([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "entry_point": "test3", "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"}
{"task_id": "test/4", "prompt": "\ndef digitos(n):\n", "question": "\"\"\"Dado un entero positivo n, devuelve el producto de los dígitos impares.\n    Devuelve 0 si todos los dígitos son pares.\n    Por ejemplo:\n    digitos(1)  == 1\n    digitos(4)  == 0\n    digitos(235) == 15\n    \"\"\"\n", "entry_point": "test4", "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n"}