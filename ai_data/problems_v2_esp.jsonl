{"task_id": "test/3", "prompt": "\n\n\nclass Usuario(Resource):\n", "question": "Usando Flask, define una clase llamada Usuario con un método post para insertar un nuevo usuario en la tabla de usuarios de pyMongo mongo db. Obtenga los atributos de nombre y designación de la solicitud. Defina un método get para encontrar un usuario en la tabla de usuarios de pyMongo mongo db utilizando los atributos de nombre y designación.", "entry_point": "test3", "canonical_solution": "class User(Resource):\n      def post(self):\n          user = mongo.db.users\n          name = request.json['name']\n          designation = request.json['designation']\n          _id = user.insert({'name': name, 'designation': designation})\n          new_user = user.find_one({'_id': _id})\n          output = {'name' : new_user['name'], 'designation' : new_user['designation']}\n          return jsonify({'result' : output})\n\n      def get(self):\n          user = mongo.db.users\n          output = []\n          for s in user.find():\n            output.append({'name' : s['name'], 'designation' : s['designation']})\n            return jsonify({'result' : output})\n\napi.add_resource(HelloWorld,'/hello')\napi.add_resource(User,'/user')\n"}
{"task_id": "test/4", "prompt": "\n\ndef get_todas_estrellas():\n", "question": "Usando Flask, defina una función llamada get_todas_estrellas que encuentre cada estrella en la tabla de estrellas pyMongo mongo db usando los atributos de nombre y distancia.", "entry_point": "test4", "canonical_solution": "def get_all_stars():\n      star = mongo.db.stars\n      output = []\n      for s in star.find():\n          output.append({'name' : s['name'], 'distance' : s['distance']})\n      return jsonify({'result' : output})\n"}
{"task_id": "test/5", "prompt": "\n\ndef get_una_estrella(name):\n", "question": "Usando Flask, defina una función llamada get_una_estrella(nombre) que encuentre una estrella en la tabla de estrellas pyMongo mongo db usando la entrada de nombre dada a la función. Devuelve el nombre y la distancia de la estrella en caso de que exista en una salida json", "entry_point": "test5", "canonical_solution": "def get_one_star(name):\n      star = mongo.db.stars\n      s = star.find_one({'name' : name})\n      if s:\n          output = {'name' : s['name'], 'distance' : s['distance']}\n      else:\n          output = 'No such name'\n      return jsonify({'result' : output})\n"}
{"task_id": "test/6", "prompt": "\n\ndef anadir_estrella():\n", "question": "Usando Flask, defina una función llamada anadir_estrella() que agregue una estrella en la tabla de estrellas pyMongo mongo db. Para agregar la estrella, obtenga los atributos de nombre y distancia de la solicitud y devuelva la salida en formato json.", "entry_point": "test5", "canonical_solution": "def add_star():\n      star = mongo.db.stars\n      name = request.json['name']\n      distance = request.json['distance']\n      star_id = star.insert({'name': name, 'distance': distance})\n      new_star = star.find_one({'_id': star_id })\n      output = {'name' : new_star['name'], 'distance' : new_star['distance']}\n      return jsonify({'result' : output})\n"}